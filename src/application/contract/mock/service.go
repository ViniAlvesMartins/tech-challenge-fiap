// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	payment_service "github.com/ViniAlvesMartins/tech-challenge-fiap/src/application/modules/response/payment_service"
	entity "github.com/ViniAlvesMartins/tech-challenge-fiap/src/entities/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockExternalPaymentService is a mock of ExternalPaymentService interface.
type MockExternalPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalPaymentServiceMockRecorder
}

// MockExternalPaymentServiceMockRecorder is the mock recorder for MockExternalPaymentService.
type MockExternalPaymentServiceMockRecorder struct {
	mock *MockExternalPaymentService
}

// NewMockExternalPaymentService creates a new mock instance.
func NewMockExternalPaymentService(ctrl *gomock.Controller) *MockExternalPaymentService {
	mock := &MockExternalPaymentService{ctrl: ctrl}
	mock.recorder = &MockExternalPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalPaymentService) EXPECT() *MockExternalPaymentServiceMockRecorder {
	return m.recorder
}

// CreateQRCode mocks base method.
func (m *MockExternalPaymentService) CreateQRCode(payment entity.Payment) (payment_service.CreateQRCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQRCode", payment)
	ret0, _ := ret[0].(payment_service.CreateQRCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQRCode indicates an expected call of CreateQRCode.
func (mr *MockExternalPaymentServiceMockRecorder) CreateQRCode(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQRCode", reflect.TypeOf((*MockExternalPaymentService)(nil).CreateQRCode), payment)
}
