// Code generated by MockGen. DO NOT EDIT.
// Source: use_case.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/ViniAlvesMartins/tech-challenge-fiap/internal/entities/entity"
	enum "github.com/ViniAlvesMartins/tech-challenge-fiap/internal/entities/enum"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderUseCase) Create(order entity.Order) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", order)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderUseCaseMockRecorder) Create(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderUseCase)(nil).Create), order)
}

// GetAll mocks base method.
func (m *MockOrderUseCase) GetAll() (*[]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderUseCaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderUseCase)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockOrderUseCase) GetById(id int) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockOrderUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrderUseCase)(nil).GetById), id)
}

// UpdateStatusById mocks base method.
func (m *MockOrderUseCase) UpdateStatusById(id int, status enum.StatusOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusById", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusById indicates an expected call of UpdateStatusById.
func (mr *MockOrderUseCaseMockRecorder) UpdateStatusById(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusById", reflect.TypeOf((*MockOrderUseCase)(nil).UpdateStatusById), id, status)
}

// MockCategoryUseCase is a mock of CategoryUseCase interface.
type MockCategoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryUseCaseMockRecorder
}

// MockCategoryUseCaseMockRecorder is the mock recorder for MockCategoryUseCase.
type MockCategoryUseCaseMockRecorder struct {
	mock *MockCategoryUseCase
}

// NewMockCategoryUseCase creates a new mock instance.
func NewMockCategoryUseCase(ctrl *gomock.Controller) *MockCategoryUseCase {
	mock := &MockCategoryUseCase{ctrl: ctrl}
	mock.recorder = &MockCategoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryUseCase) EXPECT() *MockCategoryUseCaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockCategoryUseCase) GetById(id int) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCategoryUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCategoryUseCase)(nil).GetById), id)
}

// MockClientUseCase is a mock of ClientUseCase interface.
type MockClientUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockClientUseCaseMockRecorder
}

// MockClientUseCaseMockRecorder is the mock recorder for MockClientUseCase.
type MockClientUseCaseMockRecorder struct {
	mock *MockClientUseCase
}

// NewMockClientUseCase creates a new mock instance.
func NewMockClientUseCase(ctrl *gomock.Controller) *MockClientUseCase {
	mock := &MockClientUseCase{ctrl: ctrl}
	mock.recorder = &MockClientUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientUseCase) EXPECT() *MockClientUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientUseCase) Create(client entity.Client) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", client)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientUseCaseMockRecorder) Create(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientUseCase)(nil).Create), client)
}

// GetByCpf mocks base method.
func (m *MockClientUseCase) GetByCpf(cpf int) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCpf", cpf)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCpf indicates an expected call of GetByCpf.
func (mr *MockClientUseCaseMockRecorder) GetByCpf(cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCpf", reflect.TypeOf((*MockClientUseCase)(nil).GetByCpf), cpf)
}

// GetByCpfOrEmail mocks base method.
func (m *MockClientUseCase) GetByCpfOrEmail(cpf int, email string) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCpfOrEmail", cpf, email)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCpfOrEmail indicates an expected call of GetByCpfOrEmail.
func (mr *MockClientUseCaseMockRecorder) GetByCpfOrEmail(cpf, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCpfOrEmail", reflect.TypeOf((*MockClientUseCase)(nil).GetByCpfOrEmail), cpf, email)
}

// GetById mocks base method.
func (m *MockClientUseCase) GetById(id *int) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockClientUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockClientUseCase)(nil).GetById), id)
}

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductUseCase) Create(product entity.Product) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductUseCaseMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductUseCase)(nil).Create), product)
}

// Delete mocks base method.
func (m *MockProductUseCase) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductUseCaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductUseCase)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockProductUseCase) GetById(int int) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", int)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProductUseCaseMockRecorder) GetById(int interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProductUseCase)(nil).GetById), int)
}

// GetProductByCategory mocks base method.
func (m *MockProductUseCase) GetProductByCategory(categoryId int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByCategory", categoryId)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByCategory indicates an expected call of GetProductByCategory.
func (mr *MockProductUseCaseMockRecorder) GetProductByCategory(categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByCategory", reflect.TypeOf((*MockProductUseCase)(nil).GetProductByCategory), categoryId)
}

// Update mocks base method.
func (m *MockProductUseCase) Update(product entity.Product, id int) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", product, id)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductUseCaseMockRecorder) Update(product, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductUseCase)(nil).Update), product, id)
}
